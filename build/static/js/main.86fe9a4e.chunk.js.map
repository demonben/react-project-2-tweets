{"version":3,"sources":["lib/api.js","components/FormTweet.jsx","components/Tweet.jsx","TweetContext.js","components/ListTweets.jsx","components/loader.jsx","components/NavBar.jsx","components/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["BaseUrl","getData","a","axios","get","response","data","tweets","value","userName","date","Date","toISOString","obj","content","post","alert","FormTweet","props","state","text","this","setState","event","preventDefault","postData","then","updateTweets","user","localStorage","getItem","onSubmit","formSubmit","className","htmlFor","placeholder","type","name","id","onChange","changeInputText","target","disabled","length","isButtonIsDisable","React","Component","Tweet","tweet","TweetContext","createContext","ListTweets","Consumer","console","log","map","index","Loader","color","height","width","NavBar","to","Profile","setItem","changUser","onClick","putUserNameInLocalStorage","App","res","isLoading","loadTweets","tweetFromServer","JSON","parse","prevState","now","time","path","dataForStorage","changeText","addTweet","callBack","Provider","dataForList","userNameChanger","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86fe9a4e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BaseUrl = \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/\"\n\nexport async function getData(){\n    const response = await axios.get(`${BaseUrl}/tweet`)\n    return response.data.tweets;\n}\n\n\nexport async function postData(value,userName){\n    const date = new Date().toISOString()\n    // { console.log(value)}\n    // { console.log(userName) }\n    const obj = { content: value, userName: userName, date: date  }\n    try{\n        const response = await axios.post(`${BaseUrl}/tweet`, obj)\n        return response.data;\n    }\n    catch(err){\n     alert(\"something goes wrong\")\n    }\n}","import React from \"react\";\nimport { postData, getData } from \"../lib/api\";\n\nclass FormTweet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      userName: \"\",\n      // updatedTweets: [],\n    };\n  }\n\n  changeInputText(value) {\n    this.setState({ text: value });\n  }\n  formSubmit(event) {\n    event.preventDefault();\n    postData(this.state.text, this.state.userName).then(\n      () => {\n        getData().then((response) => {\n          // this.setState({ updatedTweets: response });\n          this.props.updateTweets(response);\n        });\n      }\n    )\n    \n  }\n  componentDidMount() {\n    let user = localStorage.getItem(\"username\");\n    \n    this.setState({ userName: user });\n  }\n  render() {\n  //  {console.log(this.state.updatedTweets)}\n    // {console.log(\n    //   this.props.isButtonIsDisable)\n    // }\n    return (\n      <div>\n        <form\n          onSubmit={(event) => {\n            this.formSubmit(event);\n          }}\n        >\n          <label className=\"label\" htmlFor=\"text\">\n            <textarea\n              placeholder=\"What you have in mind...\"\n              className=\"textarea\"\n              type=\"text\"\n              name=\"text\"\n              id=\"text\"\n              value={this.state.text}\n              onChange={(event) => this.changeInputText(event.target.value)}\n            ></textarea>\n            <button\n              className=\"button btn btn-primary\"\n              type=\"submit\"\n              disabled={\n                this.state.text.length > 140 || this.props.isButtonIsDisable\n              }\n              // postTweet={this.postTweet}\n            >\n              Tweet\n            </button>\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\nexport default FormTweet;\n","import React from \"react\";\n// import TweetContext from \"../TweetContext\";\n\n\nclass Tweet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n  \n    };\n  }\nrender(){\n\n    return (\n      <div className=\"tweet\">\n        <div className=\"userAndDate\">\n          <p>{this.props.tweet.userName}</p>\n          <p>{this.props.tweet.date}</p>\n        </div>\n        <div className=\"content\">\n          <p>{this.props.tweet.content}</p>\n        </div>\n      </div>\n    );\n}\n}\n\nexport default Tweet","import React from 'react';\n\nconst TweetContext = React.createContext()\n\nexport default TweetContext","import React from \"react\";\nimport Tweet from \"./Tweet\";\nimport TweetContext from \"../TweetContext\";\n\n\n\nfunction ListTweets() {\n  return (\n    <TweetContext.Consumer>\n      {(tweets) => (\n        <div className=\"tweetList\">\n          {console.log(tweets)}\n          {tweets.map((tweet, index) => {\n            return <Tweet key={tweet.id} tweet={tweet} index={index}></Tweet>;\n          })}\n        </div>\n      )}\n    </TweetContext.Consumer>\n  );\n}\n\nexport default ListTweets;\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst Loader = ({ type, color }) => (\n  <ReactLoading type={'cubes'} color={\"red\"} height={50} width={50} />\n);\n\nexport default Loader;\n","import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"navContainer\">\n        <ul className=\"barnav nav\">\n          <li className=\"\">\n            <Link className=\"nav-item\" to=\"/home\">\n              Home\n            </Link>\n          </li>\n          <li>\n            <Link className=\"nav-item\" to=\"/profile\">\n              Profile\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default NavBar;\n","import React from \"react\";\n\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n    };\n  }\n  changUser(event) {\n      event.preventDefault();\n      this.setState({ userName: event });\n  }\nputUserNameInLocalStorage(){\nlocalStorage.setItem(\"username\", this.state.userName);\n}\n  render() {\n    return (\n      <>\n        <div className=\"profileContainer\">\n          <h2 className=\"headerProfile\">Profile</h2>\n          <p className=\"profile\">USER NAME</p>\n          <form\n            onSubmit={(event) => {\n              this.changUser(event);\n            }}\n          >\n            <label htmlFor=\"text\">\n              <textarea\n                className=\"inputUser\"\n                type=\"text\"\n                name=\"text\"\n                id=\"text\"\n                onChange={(event) =>\n                  this.setState({ userName: event.target.value })\n                }\n              ></textarea>\n              <p>\n\n              <button\n                className=\" btn btn-primary\"\n                // onClick={(x) => this.props.userNameChanger(this.state.userName)}\n                onClick={() => this.putUserNameInLocalStorage()}\n                //\n                >\n                Save\n              </button>\n                </p>\n            </label>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\nexport default Profile;\n","import React from 'react';\nimport './App.css';\nimport FormTweet from './components/FormTweet'\nimport ListTweets from './components/ListTweets';\nimport Loader from './components/loader';\nimport { getData } from './lib/api'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\nimport NavBar from './components/NavBar';\nimport Profile from \"./components/Profile\"\nimport TweetContext from \"./TweetContext\"\n\n\nclass App extends React.Component {\nconstructor(props){\n  super(props);\n  this.state = {\n    tweets:[],\n    isLoading:false,\n  } \n}\ncomponentDidMount(){\n  this.loadTweets()\n  // setInterval(()=>{this.loadTweets()}, 10000)\n  // this.loadTweets()\n}\nasync loadTweets(){\n  this.setState({isLoading:true})\n  const tweetFromServer = await getData()\n  this.setState({ tweets: tweetFromServer, isLoading: false})\n}\n\nupdateTweets = (res) => {\n  // console.log(res)\n  this.setState({ tweets: res} )\n}\n\n// postTweet = async (value) =>{\n//   console.log(value)\n//   // postData()\n// }\n  callBack(data){\n  this.setState({tweets : JSON.parse(data)});\n}\ncallBacker(){\n  console.log('wp')\n}\n  addTweet(text,userName){\nthis.setState((prevState)=>{\n  const tweet = {\n    id: Date.now(),\n    text: text,\n    time: new Date()+\"\",\n    userName:\"\"\n  }\n  return{ \n    tweets: [...prevState.tweets, tweet]\n  }\n})\n}\n  userNameChanger(value) {\n    this.setState({ userName: value });\n    console.log(this.state.userName)\n  \n  }\nrender(){\n  return (\n    \n    <div className=\"App\">\n\n      <Router>\n        <NavBar></NavBar>\n        <Switch>\n          <Router path=\"/home\">\n            <FormTweet isButtonIsDisable={this.state.isLoading} dataForStorage={this.state.tweets} changeText={(text) => { this.addTweet(text) }} callBack={(data) => this.callBack(data)} userName={this.state.userName} updateTweets={this.updateTweets}/>\n            {this.state.isLoading && <Loader></Loader>}\n            <TweetContext.Provider value={this.state.tweets}>\n            <ListTweets dataForList={this.state.tweets}></ListTweets>\n            </TweetContext.Provider>\n          </Router>\n          <Router path=\"/profile\">\n            <Profile\n              userNameChanger={(data)=>this.userNameChanger(data)}\n             ></Profile>\n          </Router>\n        </Switch>\n      </Router>\n\n     \n    </div>\n  );\n\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}